require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe HerosController, type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Hero. As you add validations to Hero, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # HerosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all heros as @heros" do
      hero = Hero.create! 
      get '/heros.json', params: {}
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "assigns the requested hero as @hero" do
      hero = Hero.create! 
      get '/heros.json', params: {id: hero.to_param}
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "assigns the requested hero as @hero" do
      hero = Hero.create! 
      get '/heros.json', params: {id: hero.to_param}
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Hero" do
        hero = Hero.create! 
        expect {
          post '/heros.json', hero.to_json, { 'CONTENT_TYPE' => 'application/json', 'ACCEPT' => 'application/json' }
        }.to change(Hero, :count).by(1)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested hero" do
        hero = Hero.create! 
        put '/heros/' + hero.id + '.json', :hero => hero.attributes = { :age => 10 }
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested hero" do
      hero = Hero.create! 
      expect {
        delete '/heros/' + hero.id + '.json'
      }.to change(Hero, :count).by(-1)
    end
  end

end
